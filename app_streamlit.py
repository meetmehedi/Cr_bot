import streamlit as st
import json
import os
from voice_engine.recognizer import recognize_speech

# --- Helper functions for intent matching and responses ---
def list_assignments(data):
    items = data.get("Assignment", [])
    if not items:
        return "ЁЯУн ржХрзЛржирзЛ ржЕрзНржпрж╛рж╕рж╛ржЗржиржорзЗржирзНржЯ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред"
    response = "ЁЯУЪ ржЕрзНржпрж╛рж╕рж╛ржЗржиржорзЗржирзНржЯ рждрж╛рж▓рж┐ржХрж╛:\n"
    for a in items:
        response += f"тАв {a['title']} (Due: {a['due_date']})\n"
    return response

def list_lab_reports(data):
    items = data.get("lab report", [])
    if not items:
        return "ЁЯзк ржХрзЛржирзЛ рж▓рзНржпрж╛ржм рж░рж┐ржкрзЛрж░рзНржЯ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред"
    response = "ЁЯзк рж▓рзНржпрж╛ржм рж░рж┐ржкрзЛрж░рзНржЯ:\n"
    for a in items:
        response += f"тАв {a['title']}\n"
    return response

def list_cts(data):
    items = data.get("CT", [])
    if not items:
        return "ЁЯУЭ ржХрзЛржирзЛ рж╕рж┐ржЯрж┐ ржирж┐рж░рзНржзрж╛рж░рж┐ржд ржирзЗржЗред"
    response = "ЁЯУЭ ржХрзНрж▓рж╛рж╕ ржЯрзЗрж╕рзНржЯ (CT):\n"
    for a in items:
        response += f"тАв {a['title']} (Date: {a['date']})\n"
    return response

def list_presentations(data):
    items = data.get("Presentation", [])
    if not items:
        return "ЁЯОд ржХрзЛржирзЛ ржкрзНрж░рзЗржЬрзЗржирзНржЯрзЗрж╢ржи ржирж┐рж░рзНржзрж╛рж░рж┐ржд ржирзЗржЗред"
    response = "ЁЯОд ржкрзНрж░рзЗржЬрзЗржирзНржЯрзЗрж╢ржи рждрж╛рж▓рж┐ржХрж╛:\n"
    for a in items:
        response += f"тАв {a['title']} (Date: {a['date']})\n"
    return response

def match_intent(query, data):
    query_lower = query.lower()
    if "ржЕрзНржпрж╛рж╕рж╛ржЗржиржорзЗржирзНржЯ" in query or "assignment" in query_lower:
        return "assignment", list_assignments(data)
    elif "рж▓рзНржпрж╛ржм" in query or "рж▓рзНржпрж╛ржм рж░рж┐ржкрзЛрж░рзНржЯ" in query or "lab" in query_lower:
        return "lab", list_lab_reports(data)
    elif "рж╕рж┐ржЯрж┐" in query or "ct" in query_lower:
        return "ct", list_cts(data)
    elif "ржкрзНрж░рзЗржЬрзЗржирзНржЯрзЗрж╢ржи" in query or "presentation" in query_lower:
        return "presentation", list_presentations(data)
    else:
        return "unknown", "ржЖржорж┐ ржирж┐рж╢рзНржЪрж┐ржд ржирж╛ ржЖржкржирж┐ ржХрзА ржЬрж╛ржирждрзЗ ржЪрж╛ржЪрзНржЫрзЗржиред ржЖржмрж╛рж░ ржмрж▓рзБржиред"

# Load class data
DATA_FILE = "class_schedule_d90.json"
if not os.path.exists(DATA_FILE):
    st.error("Data file not found!")
    st.stop()

with open(DATA_FILE, "r", encoding="utf-8") as f:
    data = json.load(f)

st.set_page_config(page_title="Cr_Bot", layout="centered")
st.title("ЁЯОЩя╕П ржмрж╛ржВрж▓рж╛ ржнржпрж╝рзЗрж╕-ржирж┐рж░рзНржнрж░ ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ рж╕рж╣ржХрж╛рж░рзА")
st.markdown("##### ржХрзНрж▓рж╛рж╕ рж░рзБржЯрж┐ржи, ЁЯУН рж╕рзНржпрж╛рж░ржжрзЗрж░ рж░рзБржо,  Assignment , Lab report")

if st.button("ЁЯОз ржХржерж╛ ржмрж▓рзЛ"):
    with st.spinner("рж╢рзБржиржЫрзЗ..."):
        query = recognize_speech()
    st.write(f"**рждрзБржорж┐ ржмрж▓рзЗржЫрзЛ:** {query}")
    
    intent, response = match_intent(query, data)
    st.success(f"ЁЯУв {response}")

st.markdown("---")
st.info("ЁЯУМ рж╢рзБржзрзБржорж╛рждрзНрж░ D-90 ржмрзНржпрж╛ржЪрзЗрж░ ржЬржирзНржп рждрзИрж░рж┐ред")
